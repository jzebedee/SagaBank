// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SagaBank.Backend;

#nullable disable

namespace SagaBank.Backend.Migrations
{
    [DbContext(typeof(BankContext))]
    partial class BankContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("SagaBank.Backend.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Account");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SagaBank.Backend.Models.Transaction", b =>
                {
                    b.Property<byte[]>("TransactionId")
                        .HasColumnType("BLOB");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreditAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DebitAccountId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TransactionId");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("SagaBank.Backend.Models.ExternalAccount", b =>
                {
                    b.HasBaseType("SagaBank.Backend.Models.Account");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalAccountId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("ExternalAccount");
                });

            modelBuilder.Entity("SagaBank.Backend.Models.InternalAccount", b =>
                {
                    b.HasBaseType("SagaBank.Backend.Models.Account");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("BalanceAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<bool>("Frozen")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("InternalAccount");
                });

            modelBuilder.Entity("SagaBank.Backend.Models.Transaction", b =>
                {
                    b.HasOne("SagaBank.Backend.Models.Account", "CreditAccount")
                        .WithMany("Credits")
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SagaBank.Backend.Models.Account", "DebitAccount")
                        .WithMany("Debits")
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditAccount");

                    b.Navigation("DebitAccount");
                });

            modelBuilder.Entity("SagaBank.Backend.Models.Account", b =>
                {
                    b.Navigation("Credits");

                    b.Navigation("Debits");
                });
#pragma warning restore 612, 618
        }
    }
}
